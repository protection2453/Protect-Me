package user;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Properties;
import user.User;
import org.mindrot.jbcrypt.BCrypt;
import util.AESDec;


//회원 클래스
public class UserDAO {
	
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	private AESDec aes;
	//회원 데이터베이스 연동
	public UserDAO() {	
		try {
			//외부 암호키 리드
			String read_key = "C:\\key_management\\keymanagement.properties";
			//데이터베이스 암호 은닉
	        String propFile = "C:\\Users\\DJHW\\Desktop\\JSP\\projects\\BBS\\src\\util\\key.properties";
	        Properties props = new Properties();
	        Properties key = new Properties();	        
	        
	        FileInputStream fis = new FileInputStream(propFile);
	        FileInputStream key_fis = new FileInputStream(read_key);
	        
	        props.load(new java.io.BufferedInputStream(fis));
	        key.load(new java.io.BufferedInputStream(key_fis));
	        
	        String aes_key =key.getProperty("key");
	        aes=new AESDec(aes_key);
	      
			String dbURL = "jdbc:mysql://localhost:3306/BBS?serverTimezone=UTC";
			String dbID = "root";
			String dbPassword = aes.aesDecode(props.getProperty("password"));
			//String dbPassword = props.getProperty("password");
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(dbURL, dbID, dbPassword);			
		} catch (Exception e) {
			System.err.println("UserDAO Exception error");	
		}	
	}
	
	//로그인
	public int login(String userID, String userPassword, User user) {
		String SQL = "SELECT userPassword FROM USER WHERE userID = ?";
		try {
			pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, userID);
			rs = pstmt.executeQuery();
			
			
			if (rs.next()) {
				if(BCrypt.checkpw(userPassword, rs.getString(1)))
						return 1; // 로그인 성공
				else
					return 0; // 비밀번호 불일치
			}
			else{
				return -1; // 아이디가 없음
			}
		}
		catch (Exception e) {
			System.err.println("Login Exception error");	
		}
		return -2; // 데이터베이스 오류
	}
	
	public int count(String userID) {
		String SQL = "UPDATE USER SET userCnt = userCnt+1 WHERE userID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, userID);
			
			return pstmt.executeUpdate();
		} catch (Exception e) {
			System.err.println("Count Exception error");	
		}
		return -1; //데이터베이스 오류		
	}
	
	public int reset(String userID) {
		String SQL = "UPDATE USER SET userCnt = 0 WHERE userID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, userID);
			
			return pstmt.executeUpdate();
		} catch (Exception e) {
			System.err.println("Reset Exception error");	
		}
		return -1; //데이터베이스 오류		
	}
	
	public int getCount(String userID) {
		String SQL = "SELECT userCnt FROM USER WHERE userID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, userID);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return rs.getInt(1);
			}
		} catch (Exception e) {
			System.err.println("getCount Exception error");	
		}
		return -1;		
	}
	
	//회원가입
	public int join(User user) {
		String SQL = "INSERT INTO USER VALUES (?,?,?,?,?,?,?)";
		String hashPassword =BCrypt.hashpw(user.getUserPassword(),BCrypt.gensalt());
		user.setUserPassword(hashPassword);
		try {
			pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, user.getUserID());
			pstmt.setString(2, user.getUserPassword());
			pstmt.setString(3, user.getUserName());
			pstmt.setString(4, user.getUserGender());
			pstmt.setString(5, user.getUserEmail());
			pstmt.setInt(6, getNext());
			pstmt.setInt(7, user.getUserCnt());
			return pstmt.executeUpdate();
		} catch(Exception e) {
			System.err.println("Join Exception error");
			return -1; //데이터베이스 오류
		}
	}
	
	//회원탈퇴
	public int remove(String userID) {
		String SQL = "DELETE FROM USER WHERE userID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, userID);
			return pstmt.executeUpdate();
		} catch (Exception e) {
			System.err.println("Remove Exception error");	
		}
		return -1; //데이터베이스 오류			
	}
	
	//관리자페이지
	public int getNext() {
		String SQL = "SELECT userNum FROM USER ORDER BY userNum DESC";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				return rs.getInt(1)+1;
			}
			return 1; //첫번째 게시물인 경우
		} catch (Exception e) {
			System.err.println("GetNext Exception error");	
		}
		return -1; //데이터베이스 오류
	}
	public ArrayList<User> getList(int pageNumber) {
		String SQL = "SELECT * FROM USER WHERE userNum < ? ORDER BY userNum DESC LIMIT 10";
		ArrayList<User> list = new ArrayList<User>();
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1,  getNext() - (pageNumber - 1) * 10);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				User user = new User();
				user.setUserID(rs.getString(1));
				user.setUserPassword(rs.getString(2));
				user.setUserName(rs.getString(3));
				user.setUserGender(rs.getString(4));
				user.setUserEmail(rs.getString(5));
				user.setUserNum(rs.getInt(6));
				user.setUserCnt(rs.getInt(7));
				list.add(user);
			}
		} catch (Exception e) {
			System.err.println("GetList Exception error");	
		}
		return list;	
	}
	public boolean nextPage(int pageNumber) {
		String SQL = "SELECT * FROM USER WHERE userNum < ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, getNext() - (pageNumber - 1) * 10);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return true;
			}
		} catch (Exception e) {
			System.err.println("nextPage Exception error");	
		}
		return false;
	}
	public User getUser(int userNum) {
		String SQL = "SELECT * FROM USER WHERE userNum = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, userNum);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				User user = new User();
				user.setUserID(rs.getString(1));
				user.setUserPassword(rs.getString(2));
				user.setUserName(rs.getString(3));
				user.setUserGender(rs.getString(4));
				user.setUserEmail(rs.getString(5));
				user.setUserNum(rs.getInt(6));
				user.setUserCnt(rs.getInt(7));
				return user;
			}
		} catch (Exception e) {
			System.err.println("getUser Exception error");	
		}
		return null;		
	}
}
