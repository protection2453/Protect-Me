package bbs;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;
import util.AESDec;

//�Խ��� Ŭ����
public class BbsDAO {
	private Connection conn;
	private ResultSet rs;
	private AESDec aes;
	//�Խ��� �����ͺ��̽� ����
	public BbsDAO() {
		try {
			//ㅇㅇ
	        String propFile = "C:\\Users\\DJHW\\Desktop\\JSP\\projects\\BBS\\src\\util\\key.properties";
	        Properties props = new Properties();
	        FileInputStream fis = new FileInputStream(propFile);	         
	        props.load(new java.io.BufferedInputStream(fis));			

			String read_key = "C:\\key_management\\keymanagement.properties";
	        Properties key = new Properties();	        
	        FileInputStream key_fis = new FileInputStream(read_key);
	        key.load(new java.io.BufferedInputStream(key_fis));
	        
	        String aes_key = key.getProperty("key");
	        aes = new AESDec(aes_key);
	        
			String dbURL = "jdbc:mysql://localhost:3306/BBS?serverTimezone=UTC";
			String dbID = "root";
			String dbPassword = aes.aesDecode(props.getProperty("password"));
			
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(dbURL, dbID, dbPassword);
		} catch (Exception e) {
			System.err.println("BbsDAO Exception error");	
		}
	}
	
	//�Խù� �ۼ� ��¥ ȹ��
	public String getDate() {
		String SQL = "SELECT NOW()";
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(SQL);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				return rs.getString(1);
			}		
		} catch (Exception e) {
			System.err.println("GetDate Exception error");	
		} finally {
			if(pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					System.err.println("Write SQLException error");	
				}
			}
		}
		return ""; //�����ͺ��̽� ����
	}
	
	//�Խ����� 1���������� �Ǻ�
	public int getNext() {
		String SQL = "SELECT bbsID FROM BBS ORDER BY bbsID DESC";
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(SQL);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				return rs.getInt(1)+1;
			}
			return 1; //ù��° �Խù��� ���
		} catch (Exception e) {
			System.err.println("Write Exception error");	
		} finally {
			if(pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					System.err.println("Write SQLException error");	
				}
			}
		}
		return -1; //�����ͺ��̽� ����
	}
	
	public int write(String bbsTitle, String userID, String bbsContent) {
		String SQL = "INSERT INTO BBS VALUES(?,?,?,?,?,?)";
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, getNext());
			pstmt.setString(2, bbsTitle);
			pstmt.setString(3, userID);
			pstmt.setString(4, getDate());
			pstmt.setString(5, bbsContent);
			pstmt.setInt(6, 1);			
			
			return pstmt.executeUpdate();
		} catch (Exception e) {
			System.err.println("Write Exception error");	
			 
		} finally {
			if(pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					System.err.println("Write SQLException error");	
				}
			}
		}	
		return -1;
	}
	
	//�Խ��� �������� �Խù� 10���� �����Ͽ� ����Ʈ ����
	public ArrayList<Bbs> getList(int pageNumber) {
		String SQL = "SELECT * FROM BBS WHERE bbsID < ? AND bbsAvailable = 1 ORDER BY bbsID DESC LIMIT 10";
		ArrayList<Bbs> list = new ArrayList<Bbs>();
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1,  getNext() - (pageNumber - 1) * 10);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				Bbs bbs = new Bbs();
				bbs.setBbsID(rs.getInt(1));
				bbs.setBbsTitle(rs.getString(2));
				bbs.setUserID(rs.getString(3));
				bbs.setBbsDate(rs.getString(4));
				bbs.setBbsContent(rs.getString(5));
				bbs.setBbsAvailable(rs.getInt(6));
				list.add(bbs);
			}
		} catch (Exception e) {
			System.err.println("GetList Exception error");	
		}
		return list;	
	}
	
	//�Խ��� ������ �̵�
	public boolean nextPage(int pageNumber) {
		String SQL = "SELECT * FROM BBS WHERE bbsID < ? AND bbsAvailable = 1";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, getNext() - (pageNumber - 1) * 10);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return true;
			}
		} catch (Exception e) {
			System.err.println("NextPage Exception error");	
		}
		return false;
	}
	
	//�ش� �Խù� ���� ȹ��
	public Bbs getBbs(int bbsID) {
		String SQL = "SELECT * FROM BBS WHERE bbsID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, bbsID);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				Bbs bbs = new Bbs();
				bbs.setBbsID(rs.getInt(1));
				bbs.setBbsTitle(rs.getString(2));
				bbs.setUserID(rs.getString(3));
				bbs.setBbsDate(rs.getString(4));
				bbs.setBbsContent(rs.getString(5));
				bbs.setBbsAvailable(rs.getInt(6));
				return bbs;
			}
		} catch (Exception e) {
			System.err.println("GetBbs Exception error");	
		}
		return null;		
	}
	
	//�Խù� ����
	public int update(int bbsID, String bbsTitle, String bbsContent) {
		String SQL = "UPDATE BBS SET bbsTitle = ?, bbsContent = ? WHERE bbsID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, bbsTitle);
			pstmt.setString(2, bbsContent);
			pstmt.setInt(3, bbsID);	
			return pstmt.executeUpdate();
		} catch (Exception e) {
			System.err.println("Update Exception error");	
		}
		return -1; //�����ͺ��̽� ����		
	}
	
	//�Խù� ����
	public int delete(int bbsID) {
		String SQL = "DELETE FROM BBS WHERE bbsID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, bbsID);
			
			return pstmt.executeUpdate();
		} catch (Exception e) {
			System.err.println("Delete Exception error");	
		}
		return -1; //�����ͺ��̽� ����			
	}
	
	//ȸ��Ż��� �ش� �Խù� ����
	public int remove_bbs(String userID) {
		String SQL = "DELETE FROM BBS WHERE userID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, userID);
			
			return pstmt.executeUpdate();
		} catch (Exception e) {
			System.err.println("Removebbs Exception error");	
		}
		return -1; //�����ͺ��̽� ����			
	}	
}