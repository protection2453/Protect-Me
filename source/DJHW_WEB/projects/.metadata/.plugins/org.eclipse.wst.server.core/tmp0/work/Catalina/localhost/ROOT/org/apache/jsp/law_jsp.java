/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.43
 * Generated at: 2019-08-21 00:13:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;

public final class law_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/bootstrap.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/custom.css\">\n");
      out.write("<title>나를지켜줘</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t");

	//==========법률개정안내==========
		//세션이 유지되는지 검사
		String userID = null;
		if(session.getAttribute("userID") != null) {
			userID = (String) session.getAttribute("userID");
		}
	
      out.write("\n");
      out.write("\t<nav class=\"navbar navbar-default\">\n");
      out.write("\t\t<div class=\"navbar-header\">\n");
      out.write("\t\t\t<button type=\"button\" class=\"navbar-toggle collapsed\"\n");
      out.write("\t\t\t\tdata-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\"\n");
      out.write("\t\t\t\taria-expanded=\"false\">\n");
      out.write("\t\t\t\t<span class=\"icon-bar\"></span>\n");
      out.write("\t\t\t\t<span class=\"icon-bar\"></span>\n");
      out.write("\t\t\t\t<span class=\"icon-bar\"></span>\n");
      out.write("\t\t\t</button>\n");
      out.write("\t\t\t<a class=\"navbar-brand\" href=\"main.jsp\">나를지켜줘</a>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n");
      out.write("\t\t\t<ul class=\"nav navbar-nav\">\n");
      out.write("\t\t\t\t<li><a href=\"main.jsp\">성범죄 상담소</a></li>\n");
      out.write("\t\t\t\t<li><a href=\"population.jsp\">성범죄 인구수</a></li>\n");
      out.write("\t\t\t\t<li><a href=\"bbs.jsp\">온라인 상담</a></li>\n");
      out.write("\t\t\t\t<li><a href=\"question.jsp\">자주묻는질문</a></li>\n");
      out.write("\t\t\t\t<li><a href=\"check.jsp\">자기점검코너</a></li>\n");
      out.write("\t\t\t\t<li class=\"active\"><a href=\"law.jsp\">법률개정안내</a></li>\t\t\n");
      out.write("\t\t\t\t");

				if("admin".equals(userID)) {
				
      out.write("\n");
      out.write("\t\t\t\t<li><a href=\"admin.jsp\">관리자페이지</a></li>\t\n");
      out.write("\t\t\t\t");

					}
				
      out.write("\t\t\t\t\t\t\t\t\n");
      out.write("\t\t\t</ul>\n");
      out.write("\t\t\t");

				//세션이 없다면 -> 로그인, 회원가입 가능
				if(userID == null) {
			
      out.write("\n");
      out.write("\t\t\t<ul class=\"nav navbar-nav navbar-right\">\n");
      out.write("\t\t\t\t<li class=\"dropdown\">\n");
      out.write("\t\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\"\n");
      out.write("\t\t\t\t\t\tdata-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"\n");
      out.write("\t\t\t\t\t\taria-expanded=\"false\">접속하기<span class=\"caret\"></span></a>\n");
      out.write("\t\t\t\t\t<ul class=\"dropdown-menu\">\n");
      out.write("\t\t\t\t\t\t<li><a href=\"login.jsp\">로그인</a></li>\n");
      out.write("\t\t\t\t\t\t<li><a href=\"join.jsp\">회원가입</a></li>\n");
      out.write("\t\t\t\t\t</ul>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t</ul>\n");
      out.write("\t\t\t");
		
				//세션이 있다면 -> 로그아웃, 회원탈퇴 가능
				} else {
			
      out.write("\n");
      out.write("\t\t\t<ul class=\"nav navbar-nav navbar-right\">\n");
      out.write("\t\t\t\t<li class=\"dropdown\">\n");
      out.write("\t\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\"\n");
      out.write("\t\t\t\t\t\tdata-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"\n");
      out.write("\t\t\t\t\t\taria-expanded=\"false\">회원관리<span class=\"caret\"></span></a>\n");
      out.write("\t\t\t\t\t<ul class=\"dropdown-menu\">\n");
      out.write("\t\t\t\t\t\t<li><a href=\"logoutAction.jsp\">로그아웃</a></li>\n");
      out.write("\t\t\t\t\t\t<li><a onclick=\"return confirm('정말로 탈퇴하시겠습니까?')\" href=\"removeAction.jsp\">회원탈퇴</a></li>\n");
      out.write("\t\t\t\t\t</ul>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t</ul>\t\t\t\n");
      out.write("\t\t\t");

				}
			
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t</nav>\n");
      out.write("\t<div class=\"container\">\n");
      out.write("\t\t<div class=\"jumbotron\">\n");
      out.write("\t\t\t<div class=\"container\">\n");
      out.write("\t\t\t\t<h1>법률개정안내</h1>\n");
      out.write("\t\t\t\t<P>(출처 : 성폭력 관련 법률 개정 여성가족부, 법무부 공동 보도자료)</P>\n");
      out.write("\t\t\t\t<br />\n");
      out.write("\t\t\t\t<p>1. 1953년 9월 대한민국 형법 제정 이래 60여년 만에 성범죄에 대한 친고죄 조항을 전면 폐지하여, 앞으로 성범죄자의 경우 피해자의 고소 및 합의 여하를 불문하고 처벌되는 무관용 원칙이 적용된다. </p>\n");
      out.write("\t\t\t\t<p id=\"substring\">* 친고죄는 피해자의 고소가 있어야 처벌할 수 있는 범죄로서, 성범죄의 경우 피해자에 대한 무리한 합의 시도로 인한 2차 피해 등 부작용 발생 \n");
      out.write("\t\t\t\t\t<br />* 이번 개정으로 피해자의 고소가 없거나 고소 후 피해자와 합의하더라도 가해자를 처벌할 수 있게 되어 성범죄에 대한 엄정한 대처가 가능해짐과 동시에 피해자의 2차 피해도 방지할 수 있게 됨 </p>\n");
      out.write("\t\t\t\t<br />\n");
      out.write("\t\t\t\t<p>2. 강간죄의 대상을 ‘부녀’에서 ‘사람’으로 개정하여 성인 남성에 대한 강간죄도 처벌할 수 있게 된다. \n");
      out.write("\t\t\t\t \t<br />※ 남자 아동·청소년은 이미 아동 청소년 성보호에 관한 법률상 강간죄로 처벌 </p>\n");
      out.write("\t\t\t\t<p id=\"substring\">* 성인 대상 성범죄의 객체가 ‘부녀’로만 한정되어 있어 ‘남성’에 대한 강간 등 성적 자기결정권 침해 행위에 대해서는 그에 상응하는 처벌 규정이 없었음 \n");
      out.write("\t\t\t\t\t<br />* 이에 성인 대상 강간죄 등 성폭력범죄의 객체를 ‘부녀’에서 ‘사람’으로 확대함으로써 남성도 성폭력범죄의 피해자로 포함하여 보호 </p>\n");
      out.write("\t\t\t\t<br />\n");
      out.write("\t\t\t\t<p>3. 성적 욕망을 만족시킬 목적으로 공중화장실, 대중목욕탕 등에 침입하는 경우도 성폭력범죄로 처벌된다.</p>\n");
      out.write("\t\t\t\t<p id=\"substring\">* 자기의 성적 욕망을 만족시킬 목적으로 공중화장실, 공중목욕탕 등에 침입하거나 퇴거 요구에 응하지 아니하는 경우 ‘성적 목적을 위한 공공장소 침입행위’ 로 처벌하는 규정 신설 </p>\n");
      out.write("\t\t\t\t<br />\n");
      out.write("\t\t\t\t<p>4. 아동·청소년이 등장하는 음란물을 소지하는 경우에도 징역형으로 처벌 할 수 있게 된다. \n");
      out.write("\t\t\t\t\t<br />※ 단, 과도한 처벌이 될 수 있다는 지적에 따라 ‘아동·청소년이용음란물’의 개념과 ‘소지’의 개념을 명확히 규정</p>\n");
      out.write("\t\t\t\t<p id=\"substring\">* ‘아동·청소년이용 음란물’의 정의를 ‘아동·청소년 또는 아동·청소년으로 명백하게 인식될 수 있는 사람이나 표현물 등’으로 개정하고,\n");
      out.write("\t\t\t\t\t<br />&nbsp;&nbsp;&nbsp;‘소지’의 개념을 ‘아동·청소년이용음란물임을 알면서 이를 소지한 자’로 개정함으로서 처벌범위를 보다 명확히 함\n");
      out.write("\t\t\t\t\t<br />* ‘아동청소년이용음란물 소지죄’의 법정형에 징역형 추가 </p>\n");
      out.write("\t\t\t\t<br />\n");
      out.write("\t\t\t\t<p>5. 술을 마시고 성범죄를 범한 경우에도 형의 감경 없이 처벌할 수 있는 범죄의 범위가 확대된다.</p>\n");
      out.write("\t\t\t\t<p id=\"substring\">* 음주 또는 약물로 인한 형의 감경 규정을 대부분의 성폭력범죄에 대하여 배제할 수 있도록 하여, 주취 상태에서의 성폭력 범죄 엄벌</p>\n");
      out.write("\t\t\t\t<br />\n");
      out.write("\t\t\t\t<p>6. 공소시효가 적용되지 않는 범죄를 13세 미만 아동·청소년이나 장애인에 대한 강간·준강간 외 강제추행까지 확대하고, 강간살인죄의 경우 피해자의 연령 및 장애유무와 상관없이 공소시효가 적용되지 않아 성범죄자에 대한 책임을 끝까지 물을 수 있게 된다.</p>\n");
      out.write("\t\t\t\t<br />\n");
      out.write("\t\t\t\t<p>7. 성폭력 예방교육 의무기관에 국가기관, 지자체, 공공기관이 포함되고, 교육 결과 제출을 의무화하였으며, 교육프로그램 개발 및 전문강사 양성 등을 수행하는 ‘성폭력 예방교육 지원기관’이 운영된다</p>\n");
      out.write("\t\t\t\t<p id=\"substring\">* 기관장을 포함한 직원(비정규직 및 파견포함) + 어린이집 원생, 유치원 원생, 초·중·고·대학생(부모)이 모두 의무교육 대상자 → 교수, 직원, 학생, 모두 성폭력 예방교육의 법정 의무교육 대상</p>\n");
      out.write("\t\t\t\t<p><a class=\"btn btn-primary btn-pull\" href=\"http://www.law.go.kr/%EB%B2%95%EB%A0%B9/%EC%84%B1%ED%8F%AD%EB%A0%A5%EB%B2%94%EC%A3%84%EC%9D%98%EC%B2%98%EB%B2%8C%EB%93%B1%EC%97%90%EA%B4%80%ED%95%9C%ED%8A%B9%EB%A1%80%EB%B2%95\" role=\"button\">더 알아보기</a></p>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n");
      out.write("\t<script src=\"js/bootstrap.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
